import streamlit as st
import pandas as pd
import numpy as np
import cv2
import os
from deepface import DeepFace

df = pd.read_csv("staff_photo.csv")

def find_closest_face(uploaded_file):
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    img = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)

    print("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...")
    min_distance = float("inf")
    closest_match = None

    for _, row in df.iterrows():
        face_path = os.path.join("hse_faces_miem", row["filename"])
        if os.path.exists(face_path):
            try:
                print(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å {row['filename']}...")
                result = DeepFace.verify(img, face_path, model_name="Facenet", enforce_detection=False)
                distance = result["distance"]
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                if distance < min_distance:
                    min_distance = distance
                    closest_match = row
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å {row['filename']}: {e}")
                
    return closest_match, min_distance


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üîç –ü–æ–∏—Å–∫ –ª–∏—Ü–∞ –≤ –±–∞–∑–µ HSE MIEM")

uploaded_file = st.file_uploader("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "png", "jpeg"])

if uploaded_file is not None:
    st.image(uploaded_file, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

    if st.button("üîç –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–µ–µ –ª–∏—Ü–æ"):
        with st.spinner("–ò–¥–µ—Ç –ø–æ–∏—Å–∫..."):
            match, distance = find_closest_face(uploaded_file)

            if match is not None:
                st.success(f"üë§ –ù–∞–π–¥–µ–Ω–æ –ª–∏—Ü–æ: {match['name']} (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f})")
                face_path = os.path.join("hse_faces_miem", match["filename"])
                st.image(face_path, caption=match["name"], use_container_width=True)
            else:
                st.error("‚ùå –õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
